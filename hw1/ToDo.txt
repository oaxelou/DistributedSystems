ΑΜΕΣΑ:
1) Άλλαξε τη λογική για τον client. Δε χρειάζεται συνάρτηση στην αρχή που να
αρχικοποιεί τα threads. Βρες συνάρτηση που να κοιτάει αν υπάρχουν ήδη.
Τι έκανε ο Χρήστος:
Εκμεταλλεύτηκε τη δυνατότητα της python να μπορεί μία μεταβλητή να αλλάξει
τύπο στο runtime και αρχικοποίησε τις μεταβλητές που είναι για τα 2 threads
με μία τιμή (πχ -1) και μετά μέσα στην while(#requestid)
όταν καλεί την sendrequest, ελέγχει αν οι μεταβλητές για τα threads έχουν
την τιμή αυτή (εδώ την -1) και αν όχι αυτό σημαίνει ότι υπάρχουν ήδη τα
threads, διαφορετικά είναι η πρώτη κλήση της sendrequest οπότε τα δημιουργεί.

2) Αποφασίζουμε τι θα συμβαίνει αν υπάρχουν ενεργοί (η ενεργός) client χωρίς να υπάρχει server (ακούμε ηχητικό Λάλη για το αν αναφέρει αν είναι περίπτωση που όντως πρέπει να εξετάσουμε)
Μπορούμε: ο μαστερ σερβερ να στελνει ενα μηνυμα στον client οτι δεν υπάρχουν servers για να εξυπηρετηθει (δεν μπαινει στο dictionary)

3) Να ρωτήσουμε τον Λάλη για το multicast. Ποιοι είναι εγγεγραμμένοι στη λίστα 

//////////////////////////////////////////////////////////////////////////////////

Γενικά:
1) Στο τέλος να ξανακοιτάξουμε τι ακριβώς γίνεται με τα sockets kai to
multicast

//////////////////////////////////////////////////////////////////////////////////

Για Κυριακή 3/3/2019:
1) slave server part1 (na to xwrisoume se app kai middleware)
2) client part1 
	α) Να το χωρίσουμε σε app και middleware
	β) 'at most once' υλοποιηση, 
	γ) Να το δομήσουμε στις απαιτήσεις της εκφώνησης

3) master server part2: να υπαρχει μηχανισμος που να ελεγχει την υπαρξη των registered servers







Τι έχει γίνει ως τώρα:
1) master server part1
